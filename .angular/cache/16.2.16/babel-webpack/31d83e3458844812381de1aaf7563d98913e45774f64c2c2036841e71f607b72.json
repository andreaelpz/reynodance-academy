{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AdminComponent = class AdminComponent {\n  constructor(adminService) {\n    this.adminService = adminService;\n    this.registrations = [];\n  }\n  ngOnInit() {\n    this.fetchRegistrations();\n  }\n  fetchRegistrations() {\n    this.adminService.getAllRegistrations().subscribe(data => this.registrations = data, error => console.error('Error fetching registrations', error));\n  }\n  updateStatus(id, status) {\n    this.adminService.updateRegistrationStatus(id, status).subscribe(() => {\n      this.fetchRegistrations(); // Refresh after update\n    }, error => console.error('Error updating status', error));\n  }\n};\nAdminComponent = __decorate([Component({\n  selector: 'app-registrations',\n  templateUrl: './registrations.component.html',\n  styleUrls: ['./registrations.component.css']\n})], AdminComponent);","map":{"version":3,"names":["Component","AdminComponent","constructor","adminService","registrations","ngOnInit","fetchRegistrations","getAllRegistrations","subscribe","data","error","console","updateStatus","id","status","updateRegistrationStatus","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/andreaelopez/Desktop/Reynodance_Academy/reynodance-academy/src/app/adminView/registrations/registrations.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-registrations',\n  templateUrl: './registrations.component.html',\n  styleUrls: ['./registrations.component.css']\n})\nexport class AdminComponent implements OnInit {\n  registrations: User[] = [];\n\n  constructor(private adminService: AdminService) {}\n\n  ngOnInit(): void {\n    this.fetchRegistrations();\n  }\n\n  fetchRegistrations(): void {\n    this.adminService.getAllRegistrations().subscribe(\n      (data) => this.registrations = data,\n      (error) => console.error('Error fetching registrations', error)\n    );\n  }\n\n  updateStatus(id: string, status: string): void {\n    this.adminService.updateRegistrationStatus(id, status).subscribe(\n      () => {\n        this.fetchRegistrations(); // Refresh after update\n      },\n      (error) => console.error('Error updating status', error)\n    );\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzBC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAFhC,KAAAC,aAAa,GAAW,EAAE;EAEuB;EAEjDC,QAAQA,CAAA;IACN,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAA,kBAAkBA,CAAA;IAChB,IAAI,CAACH,YAAY,CAACI,mBAAmB,EAAE,CAACC,SAAS,CAC9CC,IAAI,IAAK,IAAI,CAACL,aAAa,GAAGK,IAAI,EAClCC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAChE;EACH;EAEAE,YAAYA,CAACC,EAAU,EAAEC,MAAc;IACrC,IAAI,CAACX,YAAY,CAACY,wBAAwB,CAACF,EAAE,EAAEC,MAAM,CAAC,CAACN,SAAS,CAC9D,MAAK;MACH,IAAI,CAACF,kBAAkB,EAAE,CAAC,CAAC;IAC7B,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CACzD;EACH;CACD;AAxBYT,cAAc,GAAAe,UAAA,EAL1BhB,SAAS,CAAC;EACTiB,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWlB,cAAc,CAwB1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}