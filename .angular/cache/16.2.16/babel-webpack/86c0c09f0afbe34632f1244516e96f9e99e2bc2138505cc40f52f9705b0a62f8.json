{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nexport let AuthService = class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'http://localhost:8080/auth'; // Replace with your backend URL\n    this.loggedIn = new BehaviorSubject(this.isTokenAvailable());\n  }\n  // Observable to track login status\n  get isLoggedIn() {\n    return this.loggedIn.asObservable();\n  }\n  // Login method\n  login(username, password) {\n    return new Observable(observer => {\n      this.http.post(`${this.baseUrl}/login`, {\n        username,\n        password\n      }).subscribe({\n        next: response => {\n          const token = response.token;\n          localStorage.setItem('authToken', token);\n          this.loggedIn.next(true);\n          observer.next(response);\n        },\n        error: error => {\n          observer.error(error);\n        }\n      });\n    });\n  }\n  // Logout method\n  logout() {\n    localStorage.removeItem('authToken');\n    this.loggedIn.next(false);\n    this.router.navigate(['/sign-in']); // Redirect to login page\n  }\n  // Check if token is available in localStorage\n  isTokenAvailable() {\n    return !!localStorage.getItem('authToken');\n  }\n  // Decode the JWT to extract information\n  getRole() {\n    const token = localStorage.getItem('authToken');\n    if (!token) return null;\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.role; // Assuming the token contains a \"role\" claim\n  }\n};\n\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);","map":{"version":3,"names":["Injectable","BehaviorSubject","AuthService","constructor","http","router","baseUrl","loggedIn","isTokenAvailable","isLoggedIn","asObservable","login","username","password","Observable","observer","post","subscribe","next","response","token","localStorage","setItem","error","logout","removeItem","navigate","getItem","getRole","payload","JSON","parse","atob","split","role","__decorate","providedIn"],"sources":["/Users/andreaelopez/Desktop/Reynodance_Academy/reynodance-academy/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:8080/auth'; // Replace with your backend URL\n  private loggedIn = new BehaviorSubject<boolean>(this.isTokenAvailable());\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  // Observable to track login status\n  get isLoggedIn(): Observable<boolean> {\n    return this.loggedIn.asObservable();\n  }\n\n  // Login method\n  login(username: string, password: string): Observable<any> {\n    return new Observable((observer) => {\n      this.http\n        .post(`${this.baseUrl}/login`, { username, password })\n        .subscribe({\n          next: (response: any) => {\n            const token = response.token;\n            localStorage.setItem('authToken', token);\n            this.loggedIn.next(true);\n            observer.next(response);\n          },\n          error: (error) => {\n            observer.error(error);\n          },\n        });\n    });\n  }\n\n  // Logout method\n  logout(): void {\n    localStorage.removeItem('authToken');\n    this.loggedIn.next(false);\n    this.router.navigate(['/sign-in']); // Redirect to login page\n  }\n\n  // Check if token is available in localStorage\n  private isTokenAvailable(): boolean {\n    return !!localStorage.getItem('authToken');\n  }\n\n  // Decode the JWT to extract information\n  getRole(): string | null {\n    const token = localStorage.getItem('authToken');\n    if (!token) return null;\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.role; // Assuming the token contains a \"role\" claim\n  }\n}"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,eAAe,QAAQ,MAAM;AAK/B,WAAMC,WAAW,GAAjB,MAAMA,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAH5C,KAAAC,OAAO,GAAG,4BAA4B,CAAC,CAAC;IACxC,KAAAC,QAAQ,GAAG,IAAIN,eAAe,CAAU,IAAI,CAACO,gBAAgB,EAAE,CAAC;EAET;EAE/D;EACA,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACF,QAAQ,CAACG,YAAY,EAAE;EACrC;EAEA;EACAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAIC,UAAU,CAAEC,QAAQ,IAAI;MACjC,IAAI,CAACX,IAAI,CACNY,IAAI,CAAC,GAAG,IAAI,CAACV,OAAO,QAAQ,EAAE;QAAEM,QAAQ;QAAEC;MAAQ,CAAE,CAAC,CACrDI,SAAS,CAAC;QACTC,IAAI,EAAGC,QAAa,IAAI;UACtB,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK;UAC5BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;UACxC,IAAI,CAACb,QAAQ,CAACW,IAAI,CAAC,IAAI,CAAC;UACxBH,QAAQ,CAACG,IAAI,CAACC,QAAQ,CAAC;QACzB,CAAC;QACDI,KAAK,EAAGA,KAAK,IAAI;UACfR,QAAQ,CAACQ,KAAK,CAACA,KAAK,CAAC;QACvB;OACD,CAAC;IACN,CAAC,CAAC;EACJ;EAEA;EACAC,MAAMA,CAAA;IACJH,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAAClB,QAAQ,CAACW,IAAI,CAAC,KAAK,CAAC;IACzB,IAAI,CAACb,MAAM,CAACqB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACtC;EAEA;EACQlB,gBAAgBA,CAAA;IACtB,OAAO,CAAC,CAACa,YAAY,CAACM,OAAO,CAAC,WAAW,CAAC;EAC5C;EAEA;EACAC,OAAOA,CAAA;IACL,MAAMR,KAAK,GAAGC,YAAY,CAACM,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAI,CAACP,KAAK,EAAE,OAAO,IAAI;IACvB,MAAMS,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACZ,KAAK,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,OAAOJ,OAAO,CAACK,IAAI,CAAC,CAAC;EACvB;CACD;;AAjDYhC,WAAW,GAAAiC,UAAA,EAHvBnC,UAAU,CAAC;EACVoC,UAAU,EAAE;CACb,CAAC,C,EACWlC,WAAW,CAiDvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}