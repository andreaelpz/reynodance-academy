{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8081/api/admin/registrations'; // URL to fetch registrations\n  }\n  // Method to fetch all registrations with Basic Authentication\n  getRegistrations(username, password) {\n    // Base64 encode 'username:password'\n    const authHeader = 'Basic ' + btoa(username + ':' + password);\n    // Set up headers with Authorization\n    const headers = new HttpHeaders().set('Authorization', authHeader);\n    // Make the HTTP GET request with the headers\n    return this.http.get(this.apiUrl, {\n      headers\n    });\n  }\n  static {\n    this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","AdminService","constructor","http","apiUrl","getRegistrations","username","password","authHeader","btoa","headers","set","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/andreaelopez/Desktop/Reynodance_Academy/reynodance-academy/src/app/adminView/admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Registration } from './registration.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  private apiUrl = 'http://localhost:8081/api/admin/registrations'; // URL to fetch registrations\n\n  constructor(private http: HttpClient) { }\n\n    // Method to fetch all registrations with Basic Authentication\n    getRegistrations(username: string, password: string): Observable<Registration[]> {\n      // Base64 encode 'username:password'\n      const authHeader = 'Basic ' + btoa(username + ':' + password);\n\n      // Set up headers with Authorization\n      const headers = new HttpHeaders().set('Authorization', authHeader);\n\n      // Make the HTTP GET request with the headers\n      return this.http.get<Registration[]>(this.apiUrl, { headers });\n    }\n\n    \n\n\n\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,+CAA+C,CAAC,CAAC;EAE1B;EAEtC;EACAC,gBAAgBA,CAACC,QAAgB,EAAEC,QAAgB;IACjD;IACA,MAAMC,UAAU,GAAG,QAAQ,GAAGC,IAAI,CAACH,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC;IAE7D;IACA,MAAMG,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,eAAe,EAAEH,UAAU,CAAC;IAElE;IACA,OAAO,IAAI,CAACL,IAAI,CAACS,GAAG,CAAiB,IAAI,CAACR,MAAM,EAAE;MAAEM;IAAO,CAAE,CAAC;EAChE;;;uBAhBST,YAAY,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZf,YAAY;MAAAgB,OAAA,EAAZhB,YAAY,CAAAiB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}